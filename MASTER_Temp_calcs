/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var MERIT_Streams = ee.FeatureCollection("users/jordanffieldsgr/ArcticCarbon/MERIT_Vectors_filtered_Ord7"),
    Thiessens = ee.FeatureCollection("users/jordanffieldsgr/ArcticCarbon/Good_Thiessens_3"),
    WesternMack_1 = ee.FeatureCollection("users/jordanffieldsgr/ArcticCarbon/WesternMack_1");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//// TOGGLES FOR BATCH EXPORTS /////
var tFirst = 0; // change this for exports
var tEnd = tFirst + 3;

//FUNCTIONS 


// BIG LOOP
// uncomment for batch exports
// for(var i = 0; i < 906; i++) {
//   var tFirst = (i * 3);
//   var tEnd = (tFirst + 3);


// load all thiessen polygons
var thiessen_polys = Thiessens;

// select only some thiessen polygons -- only for use with batch exports
// var tlist_ALL = thiessen_polys.aggregate_array('point_ID'); 
// var tlist_select = tlist_ALL.slice(tFirst,tEnd); 
// var thiessen_polys = thiessen_polys.filter(ee.Filter.inList('point_ID', tlist_select));

// load climate data
var monthly_climate = ee.ImageCollection("ECMWF/ERA5_LAND/MONTHLY_AGGR")
                                        .select('temperature_2m')
                                        .filterDate('1979-01-01','2023-12-31'); // goes through 8/23

var daily_climate = ee.ImageCollection("ECMWF/ERA5_LAND/DAILY_AGGR")
                                        .filterDate('1979-01-01','2023-12-31') //goes through 9/09/23
                                        .select('temperature_2m'); 
                                        
// Future climate projections
var future_climate = ee.ImageCollection("NASA/GDDP-CMIP6")
                                      .filter(ee.Filter.eq('scenario', 'ssp245')) //rcp 4.5 
                                      .filterDate('2019-01-01','2050-12-31');

/// START generating daily temp images through 2050 ///

// Select mean daily temperature
// is this used for anything?
var dailyMean = daily_climate.filter(ee.Filter.dayOfYear(151, 288));
//print('ERA5 Collect', dailyMean.size()); // 6210 images -- 45 years of 138 images/yr
var future_dailyMean = future_climate.filter(ee.Filter.dayOfYear(151, 288));
//print(future_dailyMean.first());

// for each year, create daily images of mean surface temp across all models
// map this function over the list of years

var make_future_imgs = function(year) {
  // filter images for only the current year
  var startDate = ee.Date.fromYMD(year, 1, 1);
  var endDate = ee.Date.fromYMD(year, 12, 31); 
  var curr_imgs = future_dailyMean.filterDate(startDate, endDate);
  
  // define days of year for which we want a mean temp image
  var days_to_mean = ee.List.sequence(151, 288);
  
  // map a function over that list that makes a mean temp image
  //  for each day in the list, using ONLY the data for the given year
  var daily_means = days_to_mean.map(function(day) {
    // filter this year's images for only the current day of year
    var todays_data = curr_imgs.filter(ee.Filter.dayOfYear(day, day));
    var today = todays_data.first().getNumber('day');
    var month = todays_data.first().getNumber('month');
    var year = todays_data.first().getNumber('year');
    // take mean of images for current day
    // only interested in tas band
    var mean = todays_data.select('tas')
                          .mean()
                          .set('day_of_year', day)
                          .set('date', ee.Date.fromYMD(year, month, today).format())
                          .set('year', year);
    
    return mean;
  });
  
  return daily_means; // this is an image collection of all daily mean temp images
                      // for the given year
};

// years for which we want daily mean temp images
var future_years = ee.List.sequence(2019, 2050);

// make the daily mean temp images for each year in the list.
// for each year, the mapped function returns an image collection,
// so we end up with a collection of collections, which we flatten
var future_imgs = future_years.map(make_future_imgs).flatten();
//print('future_imgs', future_imgs.get(0));
var futureImg_Col = ee.ImageCollection(future_imgs);
//print('futureImg_Col', futureImg_Col); // 

// reduce over thiessen polygons? unsure what to do with images


// export results
// Export.table.toDrive({
//     collection: null, // replace with collection to export 
//     folder: 'ARCTIC_CARBON',
//     description: 'FutureTemp_CMIP6_ensemble-mean',
//     fileNamePrefix: 'FutureTemp_CMIP6_ensemble-mean',
//     fileFormat: 'CSV'
//   }) ;

/// END generating daily temp images through 2050 ///

// NOTE: This is the start of calculating temp parameters used in final analysis
  
// Days Above 0 Degrees and Degree Days  // 


//Generates image collection for each day with mean air temperature
// var mean_tempCollection = dailyMean.filterDate('1979-01-01','2023-12-31')
//           .map(function(dailyMean){
//             var date = ee.Date(dailyMean.get('system:time_start')) // formerly 'system:time_start' with the old ERA5 data 
//             var DOY = date.getRelative('day', 'year')
//             var year = date.get('year')
//             var temp = dailyMean
//                           //.subtract(273)
//                           .set('date', date)
//                           .set('system:time_start', date)
//                           .set('DOY', DOY)
//                           .set('year', year)
//               return temp
//           });
          

// List of years for temperature calculation --
// ends in 2018 bc fxn below advances 5 years, then takes mean, so we reach 2023 in this way -- upated to 2023 on 9/19/23
var allYears = ee.List.sequence(2019,2050); // 1979-2023 for real study; 2019-2050 for future projections
var temp_yearList = ee.List.sequence(2019, 2045);  //takes a very long time to load
                                                     // to visualize, narrow year range (minimum range is 5 years however)    
                                                     // 1979 - 2018 for study period; 2019-2045 for future projections




// this one calculates days above 0 and degree days for year and returns yearly image

// Calculate number of days above 0 and degree days for every year; returns 1 images for every year with bands for degDays and above0
// with properties: 'year'
var get_above0Collection = function(year){
  // var startDate = ee.Date.fromYMD(year, 1, 1)
  // var advanceYear = 1
  // var endDate = startDate.advance(advanceYear,'year') // just want 1 year's image
  var yearSel = year;
  var tempImage_select = futureImg_Col.filter(ee.Filter.eq('year', yearSel)); 
  //for historical: mean_tempCollection.filterDate(startDate, endDate)
  var sum = tempImage_select.map(function(image){
    var image_above0 = image.subtract(273).gt(0);
    return image_above0;
  }).sum().rename('above0Days');
  var degreeDays = tempImage_select.map(function(image){
    var imageC = image.subtract(273);
    var image_below0 = imageC.where(imageC.lt(0), 0);
    return image_below0;
  }).sum();
  return ee.Image(sum.addBands(degreeDays.rename('degreeDays')))
          .set('year', ee.Number(year)) //.add(advanceYear)) //'year' represents the end year of the range
                                                         // e.g. 'year' = 1990 means that between 1985 and 1990 there were X days
                                                         // above 0 degrees celsius
};

var above0Collection = ee.ImageCollection(allYears.map(get_above0Collection));

// Calculate number of days above 0 and degree days
var get_above0 = function(year){
  var startDate = ee.Date.fromYMD(year, 1, 1);
  var advanceYear = 5; // 5 years to match up with meander rate calculations
  var endDate = startDate.advance(advanceYear,'year'); // just want 1 year's image

  var tempImage_select1 = above0Collection.filter(ee.Filter.gt('year', ee.Number(year)));
  var tempImage_select2 = tempImage_select1.filter(ee.Filter.lt('year', ee.Number(year).add(advanceYear)));
  var sum = tempImage_select2.sum();
    
  //   ee.ImageCollection(tempImage_select).map(function(image){
  //   var image_above0 = image.subtract(273).gt(0)
  //   return image_above0
  // }).sum().rename('above0Days')
  // var degreeDays = tempImage_select.map(function(image){
  //   var imageC = image.subtract(273)
  //   var image_below0 = imageC.where(imageC.lt(0), 0)
  //   return image_below0
  // }).sum()
  return sum //.addBands(degreeDays.rename('degreeDays'))
          .set('year', ee.Number(year).add(advanceYear)) //'year' represents the end year of the range
                                                         // e.g. 'year' = 1990 means that between 1985 and 1990 there were X days
                                                         // above 0 degrees celsius
};

var above0Result = ee.ImageCollection(temp_yearList.map(get_above0));

// Calculate each parameter within the Thiessen Polygons
var reduceAbove0 = above0Result.map(function(image){
  var reducer = image.reduceRegions({
          collection: thiessen_polys, // remove _asset if working with new areas // using WesternMack_1 for future, to reduce run time
          reducer: ee.Reducer.mean(), 
          scale: 500
  })
          .map(function(feature){
            return feature.set('year', image.get('year'))
                          .setGeometry(null)
                          .set('latitude', feature.geometry().centroid().coordinates().get(1))
                          .set('longitude', feature.geometry().centroid().coordinates().get(0))
                          .set('Thiessen_ID', feature.get('point_ID'));
          });
      return reducer;
}).flatten();

// Export temperature parameters to drive
Export.table.toDrive({
    collection: reduceAbove0, 
    folder: 'ARCTIC_CARBON',
    description: 'Temp_all_', //for batch exports: 'Temp_' + tFirst + '_' + tEnd,
    fileNamePrefix: 'Temp_all_', //for batch exports: 'Temp_' + tFirst + '_' + tEnd,
    fileFormat: 'CSV'
  });

//}  // close big loop -- uncomment for batch exports